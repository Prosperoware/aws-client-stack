---
AWSTemplateFormatVersion: '2010-09-09'
Description: Networking Stack
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: VPC with public and private subnets (2 AZs) & NAT
      - Key: Project
        Value: Prosperoware Content Sync
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
      - Key: Name 
        Value: Internet Gateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  NATGatewayOne:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIPOne
        - AllocationId
      SubnetId:
        Ref: PublicSubnetOne
      Tags: 
      - Key: Name
        Value: 'NAT Gateway #1'
  ElasticIPOne:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
      - Key: Name
        Value: 'Elastic IP associated with NAT Gateway #1'
  NATGatewayTwo:
    DependsOn: GatewayToInternet
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ElasticIPTwo
        - AllocationId
      SubnetId:
        Ref: PublicSubnetTwo
      Tags:
      - Key: Name
        Value: 'NAT Gateway #2'
  ElasticIPTwo:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: 'Elastic IP associated with NAT Gateway #2'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags: 
      - Key: Name
        Value: Public Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: 'Public subnet #1'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetOne
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: 'Public subnet #2'
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetTwo
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name 
        Value: 'Private Route Table #1'
  PrivateRouteToInternetOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayOne
  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetOne
      RouteTableId:
        Ref: PrivateRouteTableOne
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: 'Private subnet #1'
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags: 
      - Key: Name
        Value: 'Private Route Table #2'
  PrivateRouteToInternetTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayTwo
  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetTwo
      RouteTableId:
        Ref: PrivateRouteTableTwo
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
      - Key: Name
        Value: 'Private subnet #2'
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Lambda Functions"
      GroupName: Lambda-SG
      Tags:
        - Key: Name
          Value: 'Lambda Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
        - CidrIpv6: "::/0"
          IpProtocol: "-1"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow all egress traffic"
          IpProtocol: "-1"
        - CidrIpv6: "::/0"
          Description: "Allow all egress IPv6 traffic"
          IpProtocol: "-1"
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS instance"
      GroupName: RDS-SG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'RDS Security Group'
  SGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
Outputs:
  VPC:
    Value: !Ref VPC
  RDSSecurityGroup:
    Value: !Ref RDSSecurityGroup
  LambdaSecurityGroup: 
    Value: !Ref LambdaSecurityGroup
  PrivateSubnetOne:
    Value: !Ref PrivateSubnetOne
  PrivateSubnetTwo:
    Value: !Ref PrivateSubnetTwo
  
